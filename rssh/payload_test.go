package rssh

import (
	"encoding/json"
	"testing"
)

func TestParseTerminalModes(t *testing.T) {
	testModes := []byte{0, 0, 1, 5, 129, 0, 0, 150, 0, 128, 0, 0, 150, 0, 1, 0, 0, 0, 3, 2, 0, 0, 0, 28, 3, 0, 0, 0, 127, 4, 0, 0, 0, 21, 5, 0, 0, 0, 4, 6, 0, 0, 0, 255, 7, 0, 0, 0, 255, 8, 0, 0, 0, 17, 9, 0, 0, 0, 19, 10, 0, 0, 0, 26, 12, 0, 0, 0, 18, 13, 0, 0, 0, 23, 14, 0, 0, 0, 22, 18, 0, 0, 0, 15, 30, 0, 0, 0, 0, 31, 0, 0, 0, 0, 32, 0, 0, 0, 0, 33, 0, 0, 0, 0, 34, 0, 0, 0, 0, 35, 0, 0, 0, 0, 36, 0, 0, 0, 1, 37, 0, 0, 0, 0, 38, 0, 0, 0, 1, 39, 0, 0, 0, 0, 40, 0, 0, 0, 0, 41, 0, 0, 0, 0, 42, 0, 0, 0, 1, 50, 0, 0, 0, 1, 51, 0, 0, 0, 1, 52, 0, 0, 0, 0, 53, 0, 0, 0, 1, 54, 0, 0, 0, 1, 55, 0, 0, 0, 1, 56, 0, 0, 0, 0, 57, 0, 0, 0, 0, 58, 0, 0, 0, 0, 59, 0, 0, 0, 1, 60, 0, 0, 0, 1, 61, 0, 0, 0, 1, 62, 0, 0, 0, 0, 70, 0, 0, 0, 1, 71, 0, 0, 0, 0, 72, 0, 0, 0, 1, 73, 0, 0, 0, 0, 74, 0, 0, 0, 0, 75, 0, 0, 0, 0, 90, 0, 0, 0, 1, 91, 0, 0, 0, 1, 92, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0}

	tm := ParseTerminalModes(testModes)

	t.Logf("\nTerminalModes:\n\n%v\n", tm)
}

func TestTerminalModes_Bytes(t *testing.T) {
	testModes := []byte{0, 0, 1, 5, 129, 0, 0, 150, 0, 128, 0, 0, 150, 0, 1, 0, 0, 0, 3, 2, 0, 0, 0, 28, 3, 0, 0, 0, 127, 4, 0, 0, 0, 21, 5, 0, 0, 0, 4, 6, 0, 0, 0, 255, 7, 0, 0, 0, 255, 8, 0, 0, 0, 17, 9, 0, 0, 0, 19, 10, 0, 0, 0, 26, 12, 0, 0, 0, 18, 13, 0, 0, 0, 23, 14, 0, 0, 0, 22, 18, 0, 0, 0, 15, 30, 0, 0, 0, 0, 31, 0, 0, 0, 0, 32, 0, 0, 0, 0, 33, 0, 0, 0, 0, 34, 0, 0, 0, 0, 35, 0, 0, 0, 0, 36, 0, 0, 0, 1, 37, 0, 0, 0, 0, 38, 0, 0, 0, 1, 39, 0, 0, 0, 0, 40, 0, 0, 0, 0, 41, 0, 0, 0, 0, 42, 0, 0, 0, 1, 50, 0, 0, 0, 1, 51, 0, 0, 0, 1, 52, 0, 0, 0, 0, 53, 0, 0, 0, 1, 54, 0, 0, 0, 1, 55, 0, 0, 0, 1, 56, 0, 0, 0, 0, 57, 0, 0, 0, 0, 58, 0, 0, 0, 0, 59, 0, 0, 0, 1, 60, 0, 0, 0, 1, 61, 0, 0, 0, 1, 62, 0, 0, 0, 0, 70, 0, 0, 0, 1, 71, 0, 0, 0, 0, 72, 0, 0, 0, 1, 73, 0, 0, 0, 0, 74, 0, 0, 0, 0, 75, 0, 0, 0, 0, 90, 0, 0, 0, 1, 91, 0, 0, 0, 1, 92, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0}

	tm := ParseTerminalModes(testModes)

	tmBytes := tm.Bytes()

	t.Logf("\nTerminalModes_Bytes:\n\n%v\n", tmBytes)
}

func TestParseString(t *testing.T) {
	envKeyValue := []byte{0, 0, 0, 4, 76, 65, 78, 71, 0, 0, 0, 11, 101, 110, 95, 85, 83, 46, 85, 84, 70, 45, 56}

	t.Logf("\nenvKeyValueLen: %d\n", len(envKeyValue))

	strN := 0
	stopIndex := 0

	for stopIndex < len(envKeyValue) {
		var str string
		var err error

		str, stopIndex, err = ParseNextString(envKeyValue, stopIndex)
		if err != nil {
			t.Fatal(err)
		}

		t.Logf("\nString %d: %s - stopIndex: %d\n", strN, str, stopIndex)
		strN++
	}
}

func TestParsePtyRequest(t *testing.T) {
	ptyReqBytes := []byte{0, 0, 0, 6, 115, 99, 114, 101, 101, 110, 0, 0, 0, 213, 0, 0, 0, 57, 0, 0, 7, 125, 0, 0, 4, 2, 0, 0, 1, 5, 129, 0, 0, 150, 0, 128, 0, 0, 150, 0, 1, 0, 0, 0, 3, 2, 0, 0, 0, 28, 3, 0, 0, 0, 127, 4, 0, 0, 0, 21, 5, 0, 0, 0, 4, 6, 0, 0, 0, 255, 7, 0, 0, 0, 255, 8, 0, 0, 0, 17, 9, 0, 0, 0, 19, 10, 0, 0, 0, 26, 12, 0, 0, 0, 18, 13, 0, 0, 0, 23, 14, 0, 0, 0, 22, 18, 0, 0, 0, 15, 30, 0, 0, 0, 0, 31, 0, 0, 0, 0, 32, 0, 0, 0, 0, 33, 0, 0, 0, 0, 34, 0, 0, 0, 0, 35, 0, 0, 0, 0, 36, 0, 0, 0, 1, 37, 0, 0, 0, 0, 38, 0, 0, 0, 1, 39, 0, 0, 0, 0, 40, 0, 0, 0, 0, 41, 0, 0, 0, 0, 42, 0, 0, 0, 1, 50, 0, 0, 0, 1, 51, 0, 0, 0, 1, 52, 0, 0, 0, 0, 53, 0, 0, 0, 1, 54, 0, 0, 0, 1, 55, 0, 0, 0, 1, 56, 0, 0, 0, 0, 57, 0, 0, 0, 0, 58, 0, 0, 0, 0, 59, 0, 0, 0, 1, 60, 0, 0, 0, 1, 61, 0, 0, 0, 1, 62, 0, 0, 0, 0, 70, 0, 0, 0, 1, 71, 0, 0, 0, 0, 72, 0, 0, 0, 1, 73, 0, 0, 0, 0, 74, 0, 0, 0, 0, 75, 0, 0, 0, 0, 90, 0, 0, 0, 1, 91, 0, 0, 0, 1, 92, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0}

	ptyReq, err := ParsePtyRequest(ptyReqBytes)
	if err != nil {
		t.Fatal(err)
	}

	prettyJson, err := json.MarshalIndent(ptyReq, "", "    ")
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("\nPtyRequest:\n%v\n", string(prettyJson))
}

func TestParseDirectTCPIP(t *testing.T) {
	directTCPIPBytes := []byte{0, 0, 0, 9, 49, 50, 55, 46, 48, 46, 48, 46, 49, 0, 0, 35, 130, 0, 0, 0, 9, 49, 50, 55, 46, 48, 46, 48, 46, 49, 0, 0, 139, 158}

	directTCPIP, err := ParseDirectTCPIP(directTCPIPBytes)
	if err != nil {
		t.Fatal(err)
	}

	prettyJson, err := json.MarshalIndent(directTCPIP, "", "    ")
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("\nDirectTCPIP:\n%v\n", string(prettyJson))
}
